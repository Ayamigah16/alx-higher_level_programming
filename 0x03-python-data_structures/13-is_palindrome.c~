#include <stdlib.h>
#include "lists.h"

/**
 * reverse_listint - Reverses a linked list
 * @head: Pointer to the head of the linked list
 *
 * Return: Pointer to the new head of the reversed list
 */
listint_t *reverse_listint(listint_t **head)
{
	listint_t *prev = NULL;
	listint_t *current = *head;
	listint_t *next = NULL;

	while (current != NULL)
	{
		next = current->next;
		current->next = prev;
		prev = current;
		current = next;
	}
	*head = prev;
	return (*head);
}

/**
 * is_palindrome - Checks if a singly linked list is a palindrome
 * @head: Pointer to the head of the linked list
 *
 * Return: 0 if it is not a palindrome, 1 if it is a palindrome
 */
int is_palindrome(listint_t **head)
{
	listint_t *slow = *head;
	listint_t *fast = *head;
	listint_t *prev = NULL;
	listint_t *second_half = *head;
	int palindrome = 1;
	if (*head != NULL && (*head)->next != NULL)
	{
		while (fast != NULL && fast->next != NULL)
		{
			fast = fast->next->next;
			prev = slow;
			slow = slow->next;
		}
		if (fast != NULL)
		{
			second_half = slow->next;
		}
		else
		{
			second_half = slow;
		}
		prev->next = NULL;
		reverse_listint(&second_half);
		while (second_half != NULL)
		{
			if ((*head)->n != second_half->n)
			{
				palindrome = 0;
				break;
			}
			*head = (*head)->next;
			second_half = second_half->next;
		}

		reverse_listint(&slow);
		prev->next = slow;
	}
	return (palindrome);
}
