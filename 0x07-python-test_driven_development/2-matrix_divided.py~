#!/usr/bin/python3

def matrix_divided(matrix, div):
    """
    Divides all elements of a matrix.

    Parameters:
    matrix (list of lists): The input matrix.
    div (int or float): The divisor.

    Returns:
    list of lists: The new matrix with elements divided by div, rounded to 2 decimal places.

    Raises:
    TypeError: If matrix is not a list of lists of integers or floats,
               or if div is not a number (integer or float).
    ZeroDivisionError: If div is equal to 0.
    """
    if type(matrix) is not list or not all(type(row) is list for row in matrix):
        raise TypeError("matrix must be a matrix (list of lists) of integers/floats")

    rows = len(matrix)
    if rows == 0:
        raise TypeError("matrix must be a matrix (list of lists) of integers/floats")

    cols = len(matrix[0])

    for row in matrix:
        if len(row) != cols:
            raise TypeError("Each row of the matrix must have the same size")

        for elem in row:
            if type(elem) not in [int, float]:
                raise TypeError("matrix must be a matrix (list of lists) of integers/floats")

    if type(div) not in [int, float]:
        raise TypeError("div must be a number")

    if div == 0:
        raise ZeroDivisionError("division by zero")

    return [[round(elem / div, 2) for elem in row] for row in matrix]

# Uncomment the following line to run the provided test case
# matrix = [[1, 2, 3], [4, 5, 6]]
# print(matrix_divided(matrix, 3))
# print(matrix)
